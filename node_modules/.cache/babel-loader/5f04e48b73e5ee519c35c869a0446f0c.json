{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';\nimport \"leaflet/dist/leaflet.css\";\nimport { LMap, LTileLayer, LMarker, LPopup, LCircleMarker } from \"@vue-leaflet/vue-leaflet\";\nimport { supabase } from \"../supabase\";\nimport { modalController } from '@ionic/vue';\nimport Modal from './SpotModal.vue';\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonPage,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    LCircleMarker\n  },\n\n  setup() {},\n\n  async created() {\n    const {\n      data: events\n    } = await supabase.from('events').select('coordinates,name');\n    this.populate_markers_array(events);\n    this.loaded = true;\n  },\n\n  data: () => ({\n    zoomControl: false,\n    loaded: true,\n    markers: [],\n    currentLocation: '',\n    map: null,\n    location: null\n  }),\n  methods: {\n    populate_markers_array: function (marker_objects) {\n      let markersArr = [];\n      marker_objects.forEach(element => {\n        console.log(element.name);\n        let coordsArr = element.coordinates.split(',');\n        markersArr.push([parseFloat(coordsArr[0]), parseFloat(coordsArr[1])]);\n      });\n      this.markers = markersArr;\n    },\n\n    async openModal() {\n      const modal = await modalController.create({\n        component: Modal,\n        initialBreakpoint: 0.5,\n        breakpoints: [0, 0.5, 1]\n      });\n      return modal.present();\n    },\n\n    onReady() {\n      this.map = this.$refs[\"map\"].mapObject;\n      this.map.locate();\n    },\n\n    onLocationFound(l) {\n      console.log(l);\n      this.location = l;\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAyCA,SAASA,eAAT,QAAgC,KAAhC;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,UAA7B,EAAyCC,QAAzC,EAAmDC,UAAnD,QAAqE,YAArE;AACA,OAAO,0BAAP;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,aAA5C,QAAiE,0BAAjE;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAGA,eAAeb,eAAe,CAAC;AAC7Bc,MAAI,EAAE,UADuB;AAE7BC,YAAU,EAAE;AACVb,aADU;AAEVC,cAFU;AAGVC,YAHU;AAIVC,cAJU;AAKVJ,WALU;AAMVK,QANU;AAOVC,cAPU;AAQVC,WARU;AASVC,UATU;AAUVC;AAVU,GAFiB;;AAc7BM,OAAI,GAAK,CACR,CAf4B;;AAgB7B,QAAMC,OAAN,GAAgB;AACd,UAAM;AAACC,UAAI,EAAEC;AAAP,QAAiB,MAAMR,QAAO,CACjCS,IAD0B,CACrB,QADqB,EAE1BC,MAF0B,CAEnB,kBAFmB,CAA7B;AAGA,SAAKC,sBAAL,CAA4BH,MAA5B;AACA,SAAKI,MAAL,GAAc,IAAd;AACD,GAtB4B;;AAuB7BL,MAAI,EAAE,OAAO;AACXM,eAAW,EAAE,KADF;AAEXD,UAAM,EAAE,IAFG;AAGXE,WAAO,EAAE,EAHE;AAIXC,mBAAe,EAAE,EAJN;AAKXC,OAAG,EAAE,IALM;AAMXC,YAAQ,EAAE;AANC,GAAP,CAvBuB;AA+B7BC,SAAO,EAAE;AACPP,0BAAsB,EAAE,UAAUQ,cAAV,EAA0B;AAChD,UAAIC,UAAS,GAAI,EAAjB;AACAD,oBAAc,CAACE,OAAf,CAAuBC,OAAM,IAAK;AAChCC,eAAO,CAACC,GAAR,CAAYF,OAAO,CAACnB,IAApB;AACA,YAAIsB,SAAQ,GAAIH,OAAO,CAACI,WAAR,CAAoBC,KAApB,CAA0B,GAA1B,CAAhB;AACAP,kBAAU,CAACQ,IAAX,CAAgB,CAACC,UAAU,CAACJ,SAAS,CAAC,CAAD,CAAV,CAAX,EAA2BI,UAAU,CAACJ,SAAS,CAAC,CAAD,CAAV,CAArC,CAAhB;AACD,OAJD;AAKA,WAAKX,OAAL,GAAeM,UAAf;AACD,KATM;;AAUP,UAAMU,SAAN,GAAkB;AAChB,YAAMC,KAAI,GAAI,MAAM9B,eAAc,CAC/B+B,MADiB,CACV;AACNC,iBAAS,EAAE/B,KADL;AAENgC,yBAAiB,EAAE,GAFb;AAGNC,mBAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT;AAHP,OADU,CAApB;AAMA,aAAOJ,KAAK,CAACK,OAAN,EAAP;AACD,KAlBM;;AAmBPC,WAAO,GAAG;AACN,WAAKrB,GAAL,GAAW,KAAKsB,KAAL,CAAW,KAAX,EAAkBC,SAA7B;AACA,WAAKvB,GAAL,CAASwB,MAAT;AACH,KAtBM;;AAuBPC,mBAAe,CAACC,CAAD,EAAI;AACfnB,aAAO,CAACC,GAAR,CAAYkB,CAAZ;AACA,WAAKzB,QAAL,GAAgByB,CAAhB;AACH;;AA1BM;AA/BoB,CAAD,CAA9B","names":["defineComponent","IonPage","IonHeader","IonToolbar","IonTitle","IonContent","LMap","LTileLayer","LMarker","LPopup","LCircleMarker","supabase","modalController","Modal","name","components","setup","created","data","events","from","select","populate_markers_array","loaded","zoomControl","markers","currentLocation","map","location","methods","marker_objects","markersArr","forEach","element","console","log","coordsArr","coordinates","split","push","parseFloat","openModal","modal","create","component","initialBreakpoint","breakpoints","present","onReady","$refs","mapObject","locate","onLocationFound","l"],"sourceRoot":"","sources":["/home/pumuckl/Dokumente/code/ionic/dumpster-diving-ionic/src/views/Tab2Page.vue"],"sourcesContent":["<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Map</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content :fullscreen=\"true\">\n      <ion-header collapse=\"condense\">\n        <ion-toolbar>\n          <ion-title size=\"large\">Tab 2</ion-title>\n        </ion-toolbar>\n      </ion-header>\n      <l-map \n        @ready=\"onReady\" \n        ref=\"map\"\n        @locationfound=\"onLocationFound\"\n        z-index=0\n        :zoom=\"13\" \n        :center=\"[50.9223,11.5723]\" \n        :options=\"{zoomControl: false}\">\n        <l-tile-layer style=\"z-index: 100\" url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"></l-tile-layer>\n          <template v-if=\"location\">\n              <l-circle-marker :lat-lng=\"location.latlng\" :fillOpacity=\"1\" :radius=\"0.1\" />\n              <l-circle-marker :lat-lng=\"location.latlng\" :radius=\"location.accuracy/2\" :stroke=\"false\" />\n          </template>\n          <l-marker \n            @click=\"openModal(latLng)\"\n            v-for=\"(marker, index) in markers\"\n            :key=\"index\"\n            ref=\"markersRef\"\n            :lat-lng=\"marker\"\n            >\n            <l-popup :content=\"marker.toString()\"></l-popup>\n          </l-marker>\n      </l-map>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';\nimport \"leaflet/dist/leaflet.css\"\nimport { LMap, LTileLayer, LMarker, LPopup, LCircleMarker } from \"@vue-leaflet/vue-leaflet\";\nimport { supabase } from \"../supabase\"\nimport { modalController } from '@ionic/vue';\nimport Modal from './SpotModal.vue'\n\n\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: { \n    IonHeader, \n    IonToolbar, \n    IonTitle, \n    IonContent, \n    IonPage, \n    LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    LCircleMarker,\n    },\n  setup () {\n  },\n  async created() {\n    const {data: events} = await supabase\n      .from('events')\n      .select('coordinates,name')\n    this.populate_markers_array(events)\n    this.loaded = true\n  },\n  data: () => ({\n    zoomControl: false,\n    loaded: true,\n    markers: [],\n    currentLocation: '',\n    map: null,\n    location: null\n  }),\n  methods: {\n    populate_markers_array: function (marker_objects) {\n      let markersArr = []\n      marker_objects.forEach(element => {\n        console.log(element.name)\n        let coordsArr = element.coordinates.split(',')\n        markersArr.push([parseFloat(coordsArr[0]), parseFloat(coordsArr[1])])\n      });\n      this.markers = markersArr\n    },\n    async openModal() {\n      const modal = await modalController\n        .create({\n          component: Modal,\n          initialBreakpoint: 0.5,\n          breakpoints: [0, 0.5, 1]\n        })\n      return modal.present();\n    },\n    onReady() {\n        this.map = this.$refs[\"map\"].mapObject;\n        this.map.locate();\n    },\n    onLocationFound(l) {\n        console.log(l);\n        this.location = l;\n    },\n  }\n});\n</script>\n\n<style>\n</style>\n"]},"metadata":{},"sourceType":"module"}