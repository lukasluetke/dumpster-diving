{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"Modal Content \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ion_content = _resolveComponent(\"ion-content\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Sheet Modal \"), _createVNode(_component_ion_content, null, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1\n    /* STABLE */\n\n  })], 2112\n  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;iDAEiB;;;;;6DADbA,sCACAC,aAEcC,sBAFd,EAEc,IAFd,EAEc;sBAFD,MAEb,aAAc;;;;AAAA,GAFd","names":["_createCommentVNode","_createVNode","_component_ion_content"],"sourceRoot":"","sources":["/home/pumuckl/Dokumente/code/ionic/dumpster-diving-ionic/src/views/SpotModal.vue"],"sourcesContent":["<template>\n    <!-- Sheet Modal -->\n    <ion-content>Modal Content\n\n    </ion-content>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useCounterStore } from '@/stores/counter'\n\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: {\n    },\n  setup() {\n  },\n  async created() {\n    const {data: events} = await supabase\n      .from('events')\n      .select('coordinates,name')\n    this.populate_markers_array(events)\n    this.loaded = true\n  },\n  data: () => ({\n    spot: false,\n    zoomControl: false,\n    loaded: true,\n    markers: [],\n  }),\n  methods: {\n    populate_markers_array: function (marker_objects) {\n      // console.log(marker_objects)\n      this.markers = marker_objects.map(m => {\n        return {\n          name: m.name,\n          coord: m.coordinates.split(', ').map(c => parseFloat(c))\n        }\n      })\n      console.log(this.markers)\n    },\n    async openModal(id) {\n      const counter = useCounterStore()\n      // counter.increment()\n      counter.count = id\n      console.log(counter.count)\n\n      const modal = await modalController\n        .create({\n          component: Modal,\n          initialBreakpoint: 0.5,\n          breakpoints: [0, 0.5, 1],\n          username: \"matt\"\n        })\n      // console.log(bla)\n      return modal.present();\n    },  \n    save_id(id) {\n      const counter = useCounterStore()\n      // counter.increment()\n      counter.count = id\n      console.log(counter.count)\n    }\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}