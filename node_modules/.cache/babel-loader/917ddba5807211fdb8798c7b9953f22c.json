{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { supabase } from \"@/supabase\";\nimport \"leaflet/dist/leaflet.css\";\nimport { LMap, LTileLayer, LGeoJson, LMarker } from \"@vue-leaflet/vue-leaflet\";\nimport { // IonSegment, \n// IonSegmentButton,\n// IonCol, \n// IonGrid, \n// IonRow,\n// IonCheckbox,\nIonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonInput, IonLabel, IonItem, IonTextarea, IonButton, IonDatetime, IonModal } from '@ionic/vue';\nexport default defineComponent({\n  name: 'Tab3Page',\n  components: {\n    // IonSegment,\n    // IonSegmentButton,\n    // IonCol, \n    // IonGrid, \n    // IonRow,\n    // IonCheckbox,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonPage,\n    IonInput,\n    IonLabel,\n    IonItem,\n    IonTextarea,\n    IonButton,\n    IonDatetime,\n    IonModal,\n    LMap,\n    LTileLayer,\n    LGeoJson,\n    LMarker\n  },\n  data: () => ({\n    name: '',\n    koordinaten: '',\n    beschreibung: '',\n    datetime: '22:00',\n    days_of_week: [{\n      val: 'Mo',\n      isChecked: true\n    }, {\n      val: 'Di',\n      isChecked: true\n    }, {\n      val: 'Mi',\n      isChecked: true\n    }, {\n      val: 'Do',\n      isChecked: true\n    }, {\n      val: 'Fr',\n      isChecked: true\n    }, {\n      val: 'Sa',\n      isChecked: true\n    }, {\n      val: 'So',\n      isChecked: false\n    }],\n    geojson: {\n      type: \"FeatureCollection\",\n      features: [// ...\n      ]\n    },\n    marker_position: [51.365, 10.459],\n    geojsonOptions: {// Options that don't rely on Leaflet methods.\n    }\n  }),\n  methods: {\n    async insert() {\n      const {\n        data: error\n      } = await supabase.from('events').insert([{\n        name: this.name,\n        description: this.beschreibung,\n        coordinates: this.koordinaten,\n        time: this.datetime,\n        days_of_week: this.days_of_week,\n        status: '1'\n      }]);\n      console.log(error);\n      this.name = '';\n      this.beschreibung = '';\n      this.koordinaten = '';\n      this.datetime = '22:00';\n    },\n\n    console_log() {\n      console.log(this.days_of_week);\n    },\n\n    segmentChanged(ev) {\n      console.log('Segment changed', ev);\n    },\n\n    async beforeMount() {\n      // HERE is where to load Leaflet components!\n      const {\n        circleMarker\n      } = await import(\"leaflet/dist/leaflet-src.esm\"); // And now the Leaflet circleMarker function can be used by the options:\n\n      this.geojsonOptions.pointToLayer = (feature, latLng) => circleMarker(latLng, {\n        radius: 8\n      });\n\n      this.mapIsReady = true;\n    },\n\n    log(e) {\n      console.log(e.target.getLatLng());\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["defineComponent","supabase","LMap","LTileLayer","LGeoJson","LMarker","IonPage","IonHeader","IonToolbar","IonTitle","IonContent","IonInput","IonLabel","IonItem","IonTextarea","IonButton","IonDatetime","IonModal","name","components","data","koordinaten","beschreibung","datetime","days_of_week","val","isChecked","geojson","type","features","marker_position","geojsonOptions","methods","insert","error","from","description","coordinates","time","status","console","log","console_log","segmentChanged","ev","beforeMount","circleMarker","pointToLayer","feature","latLng","radius","mapIsReady","e","target","getLatLng"],"sourceRoot":"","sources":["/home/pumuckl/Dokumente/code/ionic/dumpster-diving-ionic/src/views/Tab3Page.vue"],"sourcesContent":["<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Spot hinzuf√ºgen</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content :fullscreen=\"true\" class=\"content\">\n      <ion-header collapse=\"condense\">\n        <ion-toolbar>\n          <ion-title size=\"large\">Tab 3</ion-title>\n        </ion-toolbar>\n      </ion-header>\n      <div class=\"form\">\n        <ion-item class=\"item\">\n          <ion-label \n            position=\"floating\">\n            Name</ion-label>\n          <ion-input\n            v-model=\"name\">\n          </ion-input>\n        </ion-item>\n        <ion-item class=\"item\">\n          <ion-label \n            position=\"floating\">\n            Koordinaten\n          </ion-label>\n          <ion-input\n            v-model=\"koordinaten\"\n            placeholder=\"12.34567, 12.34567\">\n          </ion-input>\n        </ion-item>\n        <l-map\n            :zoom=\"7\" \n            :center=\"[51.365, 10.459]\" \n            :options=\"{zoomControl: false}\" \n            style=\"height:100vw\">\n          <l-geo-json :geojson=\"geojson\" :options=\"geojsonOptions\" />\n          <l-tile-layer \n            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\">\n          </l-tile-layer>\n          <l-marker :lat-lng.sync=\"marker_position\" draggable @moveend=\"log(moveend)\"\n          >\n          </l-marker>\n          \n        </l-map>\n        <!-- <div class=\"item\">\n          <p class=\"margin-left\">\n            An welchen Tagen kann hier gerettet werden?\n          </p>\n          <ion-grid class=\"margin-left\">\n            <ion-row>\n              <ion-col \n                v-for=\"entry in days_of_week\" \n                :key=\"entry.val\">\n              <ion-label>{{entry.val}}</ion-label>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col \n                v-for=\"entry in days_of_week\" \n                :key=\"entry.val\">\n                <ion-checkbox\n                  :key=\"entry.val\"\n                  @update:modelValue=\"entry.isChecked = $event\"\n                  :modelValue=\"entry.isChecked\">\n                </ion-checkbox>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n        </div> -->\n\n        <div class=\"item\">\n          <p class=\"margin-left\">\n            Ab wann kann hier gerettet werden?\n          </p>\n          <!-- <ion-segment \n            scrollable\n            value=\"Mo\"\n            @ionChange=\"segmentChanged($event)\">\n            <ion-segment-button value=\"Mo\">\n              <ion-label>Mo</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"Di\">\n              <ion-label>Di</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"Mi\">\n              <ion-label>Mi</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"Do\">\n              <ion-label>Do</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"Fr\">\n              <ion-label>Fr</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"Sa\">\n              <ion-label>Sa</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"So\">\n              <ion-label>So</ion-label>\n            </ion-segment-button>\n          </ion-segment> -->\n          <ion-button\n            class=\"margin-left\" \n            color=\"light\"\n            id=\"open-modal\">\n            {{ datetime }}\n          </ion-button>\n          <ion-modal trigger=\"open-modal\">\n            <ion-content force-overscroll=\"false\">\n              <ion-datetime \n                class=\"timepicker\"\n                presentation=\"time\"\n                v-model=\"datetime\">\n              </ion-datetime>\n            </ion-content>\n          </ion-modal>\n        </div>\n        <ion-item class=\"item\">\n          <ion-label \n            position=\"floating\">\n            Beschreibung\n          </ion-label>\n          <ion-textarea\n            v-model=\"beschreibung\">\n          </ion-textarea>\n        </ion-item>\n        <ion-button \n          @click=\"insert()\"\n          expand=\"block\" >\n          Eintragen\n        </ion-button>\n      </div>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { supabase } from \"@/supabase\"\nimport \"leaflet/dist/leaflet.css\"\nimport { LMap, LTileLayer, LGeoJson, LMarker } from \"@vue-leaflet/vue-leaflet\";\nimport { \n  // IonSegment, \n  // IonSegmentButton,\n  // IonCol, \n  // IonGrid, \n  // IonRow,\n  // IonCheckbox,\n  IonPage, \n  IonHeader, \n  IonToolbar, \n  IonTitle, \n  IonContent, \n  IonInput,\n  IonLabel,\n  IonItem,\n  IonTextarea,\n  IonButton,\n  IonDatetime,\n  IonModal, } from '@ionic/vue';\n\nexport default defineComponent({\n  name: 'Tab3Page',\n  components: { \n    // IonSegment,\n    // IonSegmentButton,\n    // IonCol, \n    // IonGrid, \n    // IonRow,\n    // IonCheckbox,\n    IonHeader, \n    IonToolbar, \n    IonTitle, \n    IonContent, \n    IonPage,\n    IonInput,\n    IonLabel,\n    IonItem,\n    IonTextarea,\n    IonButton,\n    IonDatetime,\n    IonModal,\n    LMap,\n    LTileLayer,\n    LGeoJson,\n    LMarker },\n  data: () => ({\n    name: '',\n    koordinaten: '',\n    beschreibung: '',\n    datetime: '22:00',\n    days_of_week: [\n      { val: 'Mo', isChecked: true },\n      { val: 'Di', isChecked: true },\n      { val: 'Mi', isChecked: true },\n      { val: 'Do', isChecked: true },\n      { val: 'Fr', isChecked: true },\n      { val: 'Sa', isChecked: true },\n      { val: 'So', isChecked: false },\n    ],\n    geojson: {\n        type: \"FeatureCollection\",\n        features: [\n          // ...\n        ],\n    },\n    marker_position: [51.365, 10.459],\n    geojsonOptions: {\n        // Options that don't rely on Leaflet methods.\n      },\n  }),\n  methods: {\n    async insert() {\n      const { data: error } = await supabase\n        .from('events')\n        .insert([\n          { \n            name: this.name, \n            description: this.beschreibung, \n            coordinates: this.koordinaten, \n            time: this.datetime,\n            days_of_week: this.days_of_week,\n            status: '1',\n            },\n        ])\n      console.log(error)\n      this.name = ''\n      this.beschreibung = ''\n      this.koordinaten = ''\n      this.datetime = '22:00'\n    },\n    console_log() {\n      console.log(this.days_of_week)\n    },\n    segmentChanged(ev) {\n      console.log('Segment changed', ev);\n    },\n    async beforeMount() {\n    // HERE is where to load Leaflet components!\n    const { circleMarker } = await import(\"leaflet/dist/leaflet-src.esm\");\n\n    // And now the Leaflet circleMarker function can be used by the options:\n    this.geojsonOptions.pointToLayer = (feature, latLng) =>\n      circleMarker(latLng, { radius: 8 });\n    this.mapIsReady = true;\n  },\n  log(e) {\n    console.log(e.target.getLatLng());\n  },\n  }\n});\n</script>\n<style scoped>\n.item {\n  margin-bottom: 20px;\n}\n.form {\n  margin: 20px;\n}\nion-datetime {\n  height: 190px;\n  width: auto;\n\n  max-width: 350px;\n}\n.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(288px, 1fr));\n  grid-gap: 0 10px;\n}\n.margin-left {\n  margin-left: 16px;\n}\n\nion-modal {\n  --width: 290px;\n  --height: 190px;\n  --border-radius: 8px;\n}\n.map {\n  height: 30px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}