{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { useCounterStore } from '@/stores/counter';\nimport { supabase } from \"@/supabase\";\nimport { time } from 'ionicons/icons';\nimport { IonContent, IonCard, IonCardContent, IonCardHeader, IonCardTitle, IonButton, actionSheetController, IonIcon, IonLabel, IonChip, IonCol, IonGrid, IonRow } from '@ionic/vue';\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: {\n    IonContent,\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonCardTitle,\n    IonButton,\n    IonIcon,\n    IonLabel,\n    IonChip,\n    IonCol,\n    IonGrid,\n    IonRow\n  },\n  data: () => ({\n    spot: [],\n    time_since_close_value: '',\n    time_since_change_value_millisec: '',\n    time_since_change_value_minutes: '',\n    jetzt_total_minutes: '',\n    last_status_change: '',\n    heute: '',\n    last_status_change_month: ''\n  }),\n\n  setup() {\n    const aktueller_wochentag = new Date().getDay();\n    console.log(aktueller_wochentag);\n    return {\n      time\n    };\n  },\n\n  async created() {\n    const counter = useCounterStore();\n    console.log(counter.count);\n    const {\n      data: events\n    } = await supabase.from('events').select('description,name,status,time,last_status_change,days_of_week').eq('id', counter.count);\n    console.log(events);\n    this.spot = events;\n    this.pre_reset();\n  },\n\n  methods: {\n    async presentActionSheet() {\n      const actionSheet = await actionSheetController.create({\n        header: 'Status',\n        cssClass: 'my-custom-class',\n        buttons: [{\n          text: 'Heute noch nicht besucht',\n          data: 10,\n          handler: () => {\n            console.log('Share clicked');\n            this.changeStatus(1);\n          }\n        }, {\n          text: 'Für heute schon alles gerettet',\n          data: 'Data value',\n          handler: () => {\n            console.log('Play clicked');\n            this.changeStatus(2);\n          }\n        }, {\n          text: 'Hier gibts noch was',\n          handler: () => {\n            console.log('Favorite clicked');\n            this.changeStatus(3);\n          }\n        }, {\n          text: 'Abbrechen',\n          role: 'cancel',\n          handler: () => {\n            console.log('Abbrechen clicked');\n          }\n        }]\n      });\n      await actionSheet.present();\n      const {\n        role,\n        data\n      } = await actionSheet.onDidDismiss();\n      console.log('onDidDismiss resolved with role and data', role, data);\n    },\n\n    async changeStatus(future_status) {\n      console.log(future_status);\n      const counter = useCounterStore();\n      const {\n        data: error\n      } = await supabase.from('events').update({\n        status: future_status,\n        last_status_change: new Date()\n      }).eq('id', counter.count);\n      console.log(error);\n      const {\n        data: events\n      } = await supabase.from('events').select('description,name,status,last_status_change').eq('id', counter.count);\n      console.log(events);\n      this.spot = events;\n    },\n\n    check_day() {\n      const aktueller_wochentag = new Date().getDay();\n      console.log(aktueller_wochentag);\n    },\n\n    pre_reset() {\n      this.spot.forEach(element => {\n        this.reset(element.status, element.last_status_change, element.time);\n      });\n    },\n\n    reset(old_status, last_status_change, time) {\n      this.last_status_change = last_status_change; // const change_required = 0\n\n      if (old_status == 1) {\n        console.log('heute noch nicht besucht');\n      } else if (old_status == 2) {\n        this.time_since_close(time);\n      } else if (old_status == 3) {\n        this.time_since_close(time);\n      } else {\n        console.log('fehler. Der Wert ist nicht 1,2 oder 3');\n      }\n    },\n\n    time_since_close(time) {\n      console.log('time since close:'); // aktuelle Zeit:\n\n      this.heute = new Date();\n      const jetzt_hours = this.heute.getHours();\n      const jetzt_minutes = this.heute.getMinutes(); // Ladenschluss Zeit aufsplitten:\n\n      const time_split = time.split(':');\n      const time_hours = parseInt(time_split[0]);\n      const time_minutes = parseInt(time_split[1]); // zeit in minuten\n\n      const time_total_minutes = time_hours * 60 + time_minutes;\n      this.jetzt_total_minutes = jetzt_hours * 60 + jetzt_minutes;\n\n      if (time_total_minutes > this.jetzt_total_minutes) {\n        this.time_since_close_value = 1440 - (time_total_minutes - this.jetzt_total_minutes);\n        console.log(this.time_since_close_value);\n        this.time_since_change();\n      } else if (this.jetzt_total_minutes > time_total_minutes) {\n        this.time_since_close_value = this.jetzt_total_minutes - time_total_minutes;\n        console.log(this.time_since_close_value);\n        this.time_since_change();\n      } else if (time_total_minutes == this.jetzt_total_minutes) {\n        this.time_since_close_value = 0;\n        console.log(this.time_since_close_value);\n        this.time_since_change();\n      } else {\n        console.log('fehler');\n      }\n    },\n\n    time_since_change() {\n      console.log('time since change:');\n      const last_status_change_local = new Date(Date.parse(this.last_status_change) + 120 * 60000);\n      this.time_since_change_value_millisec = Date.parse(this.heute) - Date.parse(last_status_change_local);\n      this.time_since_change_value_minutes = this.time_since_change_value_millisec / 60000;\n      console.log(this.time_since_change_value_minutes);\n      this.time_since_change_vs_time_since_close();\n    },\n\n    time_since_change_vs_time_since_close() {\n      if (this.time_since_change_value_minutes < this.time_since_close_value) {\n        console.log('Letzte Statusänderung war nach dem letzten Ladenschluss. Wird ausgegeben wie in db');\n      } else if (this.time_since_close_value < this.time_since_change_value_minutes) {\n        console.log('Letzter Ladenschluss war nach der letzten Statusänderung Status wird geändert'); // ToDo\n\n        this.changeStatus(1);\n        console.log('Status wurde geändert');\n      } else {\n        console.log('Fehler');\n      }\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["defineComponent","useCounterStore","supabase","time","IonContent","IonCard","IonCardContent","IonCardHeader","IonCardTitle","IonButton","actionSheetController","IonIcon","IonLabel","IonChip","IonCol","IonGrid","IonRow","name","components","data","spot","time_since_close_value","time_since_change_value_millisec","time_since_change_value_minutes","jetzt_total_minutes","last_status_change","heute","last_status_change_month","setup","aktueller_wochentag","Date","getDay","console","log","created","counter","count","events","from","select","eq","pre_reset","methods","presentActionSheet","actionSheet","create","header","cssClass","buttons","text","handler","changeStatus","role","present","onDidDismiss","future_status","error","update","status","check_day","forEach","element","reset","old_status","time_since_close","jetzt_hours","getHours","jetzt_minutes","getMinutes","time_split","split","time_hours","parseInt","time_minutes","time_total_minutes","time_since_change","last_status_change_local","parse","time_since_change_vs_time_since_close"],"sourceRoot":"","sources":["/home/pumuckl/Dokumente/code/ionic/dumpster-diving-ionic/src/views/SpotModal.vue"],"sourcesContent":["<template>\n    <!-- Sheet Modal -->\n        <ion-content> \n            <ion-card \n                class=\"card\" \n                v-for=\"item in spot\" \n                :key=\"item.name\">\n                <ion-card-header>\n                    <ion-grid>\n                        <ion-row>\n                        <ion-col>\n                            <ion-card-title class=\"title\">\n                            {{ item.name }}\n                            </ion-card-title>\n                        </ion-col>\n                        <ion-col class=\"time_chip\">\n                            <ion-chip>\n                                <ion-icon \n                                    :icon=\"time\" \n                                    color=\"dark\">\n                                </ion-icon>\n                                <ion-label>\n                                    Ab {{ item.time }} Uhr\n                                </ion-label>\n                            </ion-chip>\n                        </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-card-header>\n                <ion-card-content>\n                    <ion-grid>\n                        <ion-row>\n                            <ion-col>\n                                <p>\n                                    {{ item.description }}\n                                </p>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row>\n                            <ion-col>\n                                <div\n                                    v-if=\"item.status == '1'\">\n                                    <ion-button \n                                        class=\"button\"\n                                        expand=\"block\" \n                                        color=\"danger\"\n                                        @click=\"presentActionSheet\">\n                                        Heute noch nicht besucht\n                                    </ion-button>\n                                </div>\n                                <div\n                                    v-if=\"item.status == '2'\">\n                                  <ion-button \n                                      class=\"button\"\n                                      expand=\"block\" \n                                      color=\"success\"\n                                      @click=\"presentActionSheet\"\n                                      >\n                                      Für heute schon alles gerettet\n                                  </ion-button>\n                                    <div>\n                                    </div>\n                                </div>\n                                <div\n                                    v-if=\"item.status == '3'\">\n                                  <ion-button \n                                      class=\"button\"\n                                      expand=\"block\" \n                                      color=\"warning\"\n                                      @click=\"presentActionSheet\"\n                                      >\n                                      Hier gibts noch was\n                                  </ion-button>\n                                    \n                                </div>\n                                <!-- //// -->\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-card-content>\n            </ion-card>\n        </ion-content>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { useCounterStore } from '@/stores/counter'\nimport { supabase } from \"@/supabase\"\nimport { time } from 'ionicons/icons';\nimport { IonContent, \n    IonCard, \n    IonCardContent, \n    IonCardHeader, \n    IonCardTitle, \n    IonButton, \n    actionSheetController,\n    IonIcon,\n    IonLabel,\n    IonChip,\n    IonCol, \n    IonGrid, \n    IonRow } from '@ionic/vue';\n\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: {\n    IonContent,\n    IonCard, \n    IonCardContent, \n    IonCardHeader, \n    IonCardTitle,\n    IonButton,\n    IonIcon,\n    IonLabel,\n    IonChip,\n    IonCol, \n    IonGrid, \n    IonRow\n    },\n  data: () => ({\n    spot: [],\n    time_since_close_value: '',\n    time_since_change_value_millisec: '',\n    time_since_change_value_minutes: '',\n    jetzt_total_minutes: '',\n    last_status_change: '',\n    heute: '',\n    last_status_change_month: '',\n  }),\n  setup() {\n    const aktueller_wochentag = new Date().getDay()\n    console.log(aktueller_wochentag)\n    return { time }\n  },\n  async created() {\n    const counter = useCounterStore()\n    console.log(counter.count)\n    const {data: events} = await supabase\n      .from('events')\n      .select('description,name,status,time,last_status_change,days_of_week')\n      .eq('id', counter.count)\n    console.log(events)\n    this.spot = events\n    this.pre_reset()\n  },\n  methods: {\n    async presentActionSheet() {\n      const actionSheet = await actionSheetController\n        .create({\n          header: 'Status',\n          cssClass: 'my-custom-class',\n          buttons: [\n            {\n              text: 'Heute noch nicht besucht',\n              data: 10,  \n              handler: () => {\n                console.log('Share clicked')\n                this.changeStatus(1)\n              },\n            },\n            {\n              text: 'Für heute schon alles gerettet',\n              data: 'Data value',\n              handler: () => {\n                console.log('Play clicked')\n                this.changeStatus(2)\n              },\n            },\n            {\n              text: 'Hier gibts noch was',\n              handler: () => {\n                console.log('Favorite clicked')\n                this.changeStatus(3)\n              },\n            },\n            {\n              text: 'Abbrechen',\n              role: 'cancel',\n              handler: () => {\n                console.log('Abbrechen clicked')\n              },\n            },\n          ],\n        });\n      await actionSheet.present();\n\n      const { role, data } = await actionSheet.onDidDismiss();\n      console.log('onDidDismiss resolved with role and data', role, data);\n    },\n    async changeStatus(future_status) {\n        console.log(future_status)\n        const counter = useCounterStore()\n        const { data: error } = await supabase\n            .from('events')\n            .update({ status: future_status, last_status_change: new Date() })\n            .eq('id', counter.count )\n        console.log(error)\n        const {data: events} = await supabase\n            .from('events')\n            .select('description,name,status,last_status_change')\n            .eq('id', counter.count)\n        console.log(events)\n        this.spot = events\n    },\n    check_day() {\n      const aktueller_wochentag = new Date().getDay()\n      console.log(aktueller_wochentag)\n    },\n    pre_reset() {\n      this.spot.forEach(element => {\n        this.reset(element.status, element.last_status_change, element.time)\n      });\n    },\n    reset(old_status, last_status_change, time) {\n        this.last_status_change = last_status_change\n        // const change_required = 0\n        if (old_status == 1) {\n          console.log('heute noch nicht besucht');\n        } else if (old_status == 2) {\n            this.time_since_close(time)\n        } else if (old_status == 3) {\n            this.time_since_close(time)\n        } else {\n            console.log('fehler. Der Wert ist nicht 1,2 oder 3');\n        }\n    },\n    time_since_close(time) {\n      console.log('time since close:')\n      // aktuelle Zeit:\n      this.heute = new Date();\n      const jetzt_hours = this.heute.getHours();\n      const jetzt_minutes = this.heute.getMinutes();\n      // Ladenschluss Zeit aufsplitten:\n      const time_split = time.split(':');\n      const time_hours = parseInt(time_split[0]);\n      const time_minutes = parseInt(time_split[1]);\n      // zeit in minuten\n      const time_total_minutes = (time_hours * 60) + time_minutes;\n      this.jetzt_total_minutes =(jetzt_hours * 60) + jetzt_minutes;\n      if (time_total_minutes > this.jetzt_total_minutes) {\n        this.time_since_close_value = 1440 - (time_total_minutes - this.jetzt_total_minutes)\n        console.log(this.time_since_close_value)\n        this.time_since_change()\n      }\n      else if (this.jetzt_total_minutes > time_total_minutes) {\n        this.time_since_close_value = this.jetzt_total_minutes - time_total_minutes\n        console.log(this.time_since_close_value)\n        this.time_since_change()\n      }\n      else if (time_total_minutes == this.jetzt_total_minutes) {\n        this.time_since_close_value = 0\n        console.log(this.time_since_close_value)\n        this.time_since_change()\n      }\n      else {\n        console.log('fehler')\n      }\n    },\n    time_since_change() {\n      console.log('time since change:')\n      const last_status_change_local = new Date(Date.parse(this.last_status_change) + (120 * 60000))\n      this.time_since_change_value_millisec = Date.parse(this.heute) - Date.parse(last_status_change_local)\n      this.time_since_change_value_minutes = this.time_since_change_value_millisec / 60000\n      console.log(this.time_since_change_value_minutes)\n      this.time_since_change_vs_time_since_close()\n    },\n    time_since_change_vs_time_since_close() {\n      if (this.time_since_change_value_minutes < this.time_since_close_value) {\n        console.log('Letzte Statusänderung war nach dem letzten Ladenschluss. Wird ausgegeben wie in db')\n      } else if (this.time_since_close_value < this.time_since_change_value_minutes) {\n        console.log('Letzter Ladenschluss war nach der letzten Statusänderung Status wird geändert')\n        // ToDo\n        this.changeStatus(1)\n        console.log('Status wurde geändert')\n\n      } else {\n        console.log('Fehler')\n      }\n    },\n  }\n})\n</script>\n\n<style scoped>\n.card {\n    margin-top: 15px;\n}\n.time_chip {\n    /* position: relative; */\n    text-align: right;\n}\n.title {\n    margin-top: 10px;\n}\n.button {\n    margin-top: 20px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}