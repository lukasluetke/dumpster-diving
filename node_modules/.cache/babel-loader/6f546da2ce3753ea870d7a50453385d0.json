{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';\nimport \"leaflet/dist/leaflet.css\";\nimport { LMap, LTileLayer, LMarker, LPopup } from \"@vue-leaflet/vue-leaflet\";\nimport { supabase } from \"@/supabase\";\nimport { modalController } from '@ionic/vue';\nimport Modal from './SpotModal.vue'; // import { reactive } from 'vue'\n\nimport { store } from './store.js';\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonPage,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    store\n  },\n\n  setup() {},\n\n  async created() {\n    const {\n      data: events\n    } = await supabase.from('events').select('coordinates,name');\n    this.populate_markers_array(events);\n    this.loaded = true;\n  },\n\n  data: () => ({\n    spot: false,\n    zoomControl: false,\n    loaded: true,\n    markers: [],\n    task: \"bla blub\",\n    id: 0,\n    store\n  }),\n  methods: {\n    populate_markers_array: function (marker_objects) {\n      // console.log(marker_objects)\n      this.markers = marker_objects.map(m => {\n        return {\n          name: m.name,\n          coord: m.coordinates.split(', ').map(c => parseFloat(c))\n        };\n      });\n      console.log(this.markers);\n    },\n\n    async openModal(bla) {\n      this.$store.commit(\"addTodo\", \"test bla\");\n      const modal = await modalController.create({\n        component: Modal,\n        initialBreakpoint: 0.5,\n        breakpoints: [0, 0.5, 1],\n        username: \"matt\"\n      });\n      console.log(bla);\n      return modal.present();\n    },\n\n    increment() {\n      this.$store.commit('increment');\n      console.log(this.$store.state.count);\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAmCA,SAASA,eAAT,QAAgC,KAAhC;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,UAA7B,EAAyCC,QAAzC,EAAmDC,UAAnD,QAAqE,YAArE;AACA,OAAO,0BAAP;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,0BAAlD;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CACA;;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,eAAeb,eAAe,CAAC;AAC7Bc,MAAI,EAAE,UADuB;AAE7BC,YAAU,EAAE;AACVb,aADU;AAEVC,cAFU;AAGVC,YAHU;AAIVC,cAJU;AAKVJ,WALU;AAMVK,QANU;AAOVC,cAPU;AAQVC,WARU;AASVC,UATU;AAUVI;AAVU,GAFiB;;AAe7BG,OAAI,GAAK,CACR,CAhB4B;;AAiB7B,QAAMC,OAAN,GAAgB;AACd,UAAM;AAACC,UAAI,EAAEC;AAAP,QAAiB,MAAMT,QAAO,CACjCU,IAD0B,CACrB,QADqB,EAE1BC,MAF0B,CAEnB,kBAFmB,CAA7B;AAGA,SAAKC,sBAAL,CAA4BH,MAA5B;AACA,SAAKI,MAAL,GAAc,IAAd;AACD,GAvB4B;;AAwB7BL,MAAI,EAAE,OAAO;AACXM,QAAI,EAAE,KADK;AAEXC,eAAW,EAAE,KAFF;AAGXF,UAAM,EAAE,IAHG;AAIXG,WAAO,EAAE,EAJE;AAKXC,QAAI,EAAE,UALK;AAMXC,MAAE,EAAE,CANO;AAOXf;AAPW,GAAP,CAxBuB;AAiC7BgB,SAAO,EAAE;AACPP,0BAAsB,EAAE,UAAUQ,cAAV,EAA0B;AAChD;AACA,WAAKJ,OAAL,GAAeI,cAAc,CAACC,GAAf,CAAmBC,KAAK;AACrC,eAAO;AACLlB,cAAI,EAAEkB,CAAC,CAAClB,IADH;AAELmB,eAAK,EAAED,CAAC,CAACE,WAAF,CAAcC,KAAd,CAAoB,IAApB,EAA0BJ,GAA1B,CAA8BK,KAAKC,UAAU,CAACD,CAAD,CAA7C;AAFF,SAAP;AAID,OALc,CAAf;AAMAE,aAAO,CAACC,GAAR,CAAY,KAAKb,OAAjB;AACD,KAVM;;AAWP,UAAMc,SAAN,CAAgBC,GAAhB,EAAqB;AACnB,WAAKC,MAAL,CAAYC,MAAZ,CAAmB,SAAnB,EAA8B,UAA9B;AACA,YAAMC,KAAI,GAAI,MAAMjC,eAAc,CAC/BkC,MADiB,CACV;AACNC,iBAAS,EAAElC,KADL;AAENmC,yBAAiB,EAAE,GAFb;AAGNC,mBAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAHP;AAINC,gBAAQ,EAAE;AAJJ,OADU,CAApB;AAOAX,aAAO,CAACC,GAAR,CAAYE,GAAZ;AACA,aAAOG,KAAK,CAACM,OAAN,EAAP;AACD,KAtBM;;AAuBPC,aAAS,GAAG;AACV,WAAKT,MAAL,CAAYC,MAAZ,CAAmB,WAAnB;AACAL,aAAO,CAACC,GAAR,CAAY,KAAKG,MAAL,CAAYU,KAAZ,CAAkBC,KAA9B;AACF;;AA1BO;AAjCoB,CAAD,CAA9B","names":["defineComponent","IonPage","IonHeader","IonToolbar","IonTitle","IonContent","LMap","LTileLayer","LMarker","LPopup","supabase","modalController","Modal","store","name","components","setup","created","data","events","from","select","populate_markers_array","loaded","spot","zoomControl","markers","task","id","methods","marker_objects","map","m","coord","coordinates","split","c","parseFloat","console","log","openModal","bla","$store","commit","modal","create","component","initialBreakpoint","breakpoints","username","present","increment","state","count"],"sourceRoot":"","sources":["/home/pumuckl/Dokumente/code/ionic/dumpster-diving-ionic/src/views/Tab2Page.vue"],"sourcesContent":["<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Map</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content :fullscreen=\"true\">\n      <ion-header collapse=\"condense\">\n        <ion-toolbar>\n          <ion-title size=\"large\">Tab 2</ion-title>\n        </ion-toolbar>\n      </ion-header>\n      <template>From A: {{ store.count }}</template>\n      <l-map \n        z-index=0\n        :zoom=\"13\" \n        :center=\"[50.9223,11.5723]\" \n        :options=\"{zoomControl: false}\">\n        <l-tile-layer style=\"z-index: 100\" url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"></l-tile-layer>\n          <l-marker \n            @click=\"increment()\"\n            v-for=\"(marker, index) in markers\"\n            :key=\"index\"\n            ref=\"markersRef\"\n            :lat-lng=\"marker.coord\"\n            >\n            <l-popup>{{ marker.name }}</l-popup>\n          </l-marker>\n      </l-map>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';\nimport \"leaflet/dist/leaflet.css\"\nimport { LMap, LTileLayer, LMarker, LPopup } from \"@vue-leaflet/vue-leaflet\";\nimport { supabase } from \"@/supabase\"\nimport { modalController } from '@ionic/vue';\nimport Modal from './SpotModal.vue';\n// import { reactive } from 'vue'\nimport { store } from './store.js'\n\nexport default defineComponent({\n  name: 'Tab2Page',\n  components: { \n    IonHeader, \n    IonToolbar, \n    IonTitle, \n    IonContent, \n    IonPage, \n    LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    store\n    },\n  \n  setup () {\n  },\n  async created() {\n    const {data: events} = await supabase\n      .from('events')\n      .select('coordinates,name')\n    this.populate_markers_array(events)\n    this.loaded = true\n  },\n  data: () => ({\n    spot: false,\n    zoomControl: false,\n    loaded: true,\n    markers: [],\n    task: \"bla blub\",\n    id: 0,\n    store\n  }),\n  methods: {\n    populate_markers_array: function (marker_objects) {\n      // console.log(marker_objects)\n      this.markers = marker_objects.map(m => {\n        return {\n          name: m.name,\n          coord: m.coordinates.split(', ').map(c => parseFloat(c))\n        }\n      })\n      console.log(this.markers)\n    },\n    async openModal(bla) {\n      this.$store.commit(\"addTodo\", \"test bla\");\n      const modal = await modalController\n        .create({\n          component: Modal,\n          initialBreakpoint: 0.5,\n          breakpoints: [0, 0.5, 1],\n          username: \"matt\"\n        })\n      console.log(bla)\n      return modal.present();\n    },  \n    increment() {\n      this.$store.commit('increment')\n      console.log(this.$store.state.count)\n    }\n  }\n});\n</script>\n\n<style>\n</style>\n"]},"metadata":{},"sourceType":"module"}